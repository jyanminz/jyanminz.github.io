<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CMU15445 PROJECT1 BUFFER POOL</title>
      <link href="/2023/04/17/CMU15445-PROJECT-1-BUFFER-POOL/"/>
      <url>/2023/04/17/CMU15445-PROJECT-1-BUFFER-POOL/</url>
      
        <content type="html"><![CDATA[<h1 id="Project-1-Buffer-Pool"><a href="#Project-1-Buffer-Pool" class="headerlink" title="Project#1-Buffer Pool"></a>Project#1-Buffer Pool</h1><p>project1要求实现一个线程安全的缓冲池，该缓冲池用于在内存和磁盘中实现数据页的来回移动，缓冲池的存在允许DBMS管理大小大于系统中可用内存的数据库。并且，缓冲池的各种操作对于数据库系统的其他部分是透明的。</p><p>下文首先对完成proj1必要的背景知识进行介绍，随之介绍各子任务的实现细节。</p><h1 id="一、Buffer-Manager"><a href="#一、Buffer-Manager" class="headerlink" title="一、Buffer Manager"></a>一、Buffer Manager</h1><p>首先，缓冲池就是在系统内存中开辟的一块用于保存磁盘数据副本的空间，这些副本较于磁盘数据往往更加“新”（被修改过）或者和磁盘数据一致，被修改过的内存数据之后会被写入磁盘中。</p><p>由于数据库的数据想要被读取或者被更新，首先要被读入系统内存中，因为磁盘访问速度远远小于内存的访问速度以及将数据库所有数据全部加载进内存是不可能的。当某线程想要访问数据库中的某个数据块时，如何减少磁盘的直接访问从而提高访问效率是一个值得探讨的问题。</p><p>缓冲池管理器(buffer pool manager)的存在就是为了最大化当线程想要访问某一数据块时，该数据块在内存中而不是磁盘中的概率，即减少对磁盘的直接访问。当某一线程对BPM发送对磁盘中的某数据块的请求：</p><ol><li>如果该数据块在缓冲池中，那么BPM将返回该数据块在内存中的地址。</li><li>如果该数据块不在缓冲池中，那么BPM首先在缓冲池中为该数据块分配相应大小的空间，这里又可以分为两个情况：<ol><li>缓冲池中空余空间大于数据块需要的空间，那么直接分配即可；</li><li>缓冲池中空余空间小于数据块需要的空间，那么BPM首先会驱逐池中的某些数据块，再进行空间的分配。如果这些数据块在加载进缓冲池中后被修改过，那么在驱逐它们之前需要将这些数据重写回磁盘。</li></ol></li></ol><p>可以看到BPM扮演的角色和虚拟内存管理器(Virtual memory manager)比较相似，但是相较于VMM，BPM的实现使用了更加精细复杂的技巧。</p><h1 id="二、Buffer-replacement-strategy"><a href="#二、Buffer-replacement-strategy" class="headerlink" title="二、Buffer replacement strategy"></a>二、Buffer replacement strategy</h1><p>当内存中没有剩余空间为新的数据块请求分配时，现存于缓冲池的某些数据块必须被驱逐，大多数操作系统使用LRU来管理数据块的驱逐。在对数据块进行驱逐出和写进来缓冲池时，需要注意以下几个方法的实现：</p><h3 id="2-1-pinned-blocks"><a href="#2-1-pinned-blocks" class="headerlink" title="2.1 pinned blocks"></a>2.1 pinned blocks</h3><p>当一个数据块被放入缓冲池后，而此时某一线程正在读取或者写入该数据页，如果这时有其他的线程将该数据块驱逐出缓冲池并且在该地址替换了一个新的数据页，这必然会出现问题。</p><p>那么为了保证正在被使用的数据页不被驱逐，就需要对该数据页打上一个标记，也就是子标题的pin这个数据页。当线程在某个数据页上执行pin操作，这个数据页在结束线程对其访问之前不会被驱逐。当线程执行完对该数据页的操作时，线程应当在该数据页上执行unpin操作，表明自己已经结束对该数据页的使用，同时表明该数据页此时可以被驱逐。</p><p>在多线程环境下，可能有多个线程对同一个数据页进行访问，那么只有当所有线程都结束了对该数据页的访问时，该数据页才能被驱逐。一个简单的实现是对缓冲池中的每一个数据页都维护一个pin_count的变量：</p><ol><li>当数据页被pin时，pin_count+1；</li><li>当数据页被unpin时，pin_count-1；</li><li>当pin_count为0时，表明其可以被驱逐出缓冲池。</li></ol><h3 id="2-2-shared-and-exclusive-locks-on-buffer"><a href="#2-2-shared-and-exclusive-locks-on-buffer" class="headerlink" title="2.2 shared and exclusive locks on buffer"></a>2.2 shared and exclusive locks on buffer</h3><p>BMP允许线程在缓冲池中拿到共享或独占锁。即当线程在某个数据页上执行变更其内容的操作时，其他线程是不能访问该数据页的内容的。其中对于上锁有如下规定：</p><ol><li>共享锁在同一时间可以被多个线程获取；</li><li>独占锁在某一时间只有一个线程能够被获取，在数据页被加上独占锁后，是不能够再加共享锁的；</li><li>当数据页被加上独占锁a或者共享锁a后，如果其余线程想要获取该数据页的独占锁b，必须等待独占锁a&#x2F;共享锁a解锁；</li><li>当数据页被加上独占锁，对该页共享锁的申请页必须等待。</li></ol><p>获取锁和释放锁的规定：</p><ol><li>当线程对某一数据页执行任何操作时，线程必须执行pin操作而后上锁，在结束对该数据页的操作后，先释放锁而后执行unpin操作；</li><li>在读取缓冲池中数据页之前，线程必须获得该数据页的共享锁，完成读取后释放之；</li><li>在更新数据页内容之前，线程必须获取该数据页的独占锁，当更新操作完成之后必须释放之。</li></ol><h1 id="三、PROJECT-1-BUFFER-POOL"><a href="#三、PROJECT-1-BUFFER-POOL" class="headerlink" title="三、PROJECT #1 - BUFFER POOL"></a>三、PROJECT #1 - BUFFER POOL</h1><h3 id="3-1-TASK-1-LRU-REPLACEMENT-POLICY"><a href="#3-1-TASK-1-LRU-REPLACEMENT-POLICY" class="headerlink" title="3.1 TASK #1 - LRU REPLACEMENT POLICY"></a>3.1 <strong><strong>TASK #1 - LRU REPLACEMENT POLICY</strong></strong></h3><p>该部分负责追踪缓冲池中页面使用的情况，主要实现lru_replacer.h中LRUReplacer类中的四个接口：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUReplacer</span> : <span class="keyword">public</span> Replacer &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">LRUReplacer</span><span class="params">(<span class="type">size_t</span> num_pages)</span></span>;</span><br><span class="line">  ~<span class="built_in">LRUReplacer</span>() <span class="keyword">override</span>;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">Victim</span><span class="params">(<span class="type">frame_id_t</span> *frame_id)</span> <span class="keyword">override</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Pin</span><span class="params">(<span class="type">frame_id_t</span> frame_id)</span> <span class="keyword">override</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Unpin</span><span class="params">(<span class="type">frame_id_t</span> frame_id)</span> <span class="keyword">override</span></span>;</span><br><span class="line">  <span class="function"><span class="type">size_t</span> <span class="title">Size</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  std::unordered_map&lt;<span class="type">frame_id_t</span>, std::list&lt;<span class="type">frame_id_t</span>&gt;::iterator&gt; _data_idx;</span><br><span class="line">  std::list&lt;<span class="type">frame_id_t</span>&gt; _data;</span><br><span class="line">  std::mutex _latch;</span><br><span class="line">  <span class="type">size_t</span> _max_pages;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中关键实现逻辑如下：</p><ol><li>Pin表示当前有线程正在访问该frame，如何确保该frame不被驱逐，最简单的方式就是将其从replacer中移除；</li><li>Unpin表示没有线程在访问该frame，表示这个frame可以成为Victim并且被驱逐，将这个frame放入replacer中即可；</li><li>Victim表示移除replacer中最不常使用的页面，其参数是一个传出参数，用于保存被驱逐出的页面的信息，当replacer为空时返回false；</li><li>LRU的实现逻辑就是：_data和_data_idx保存的是最不常被访问的数据页，当有数据页被Pin即被访问，就将其驱逐出replacer中；当数据页被Unpin，表明没有线程方位该数据页，那么就将该frame加入链表的末尾；可以看到，这样的实现保证了最不常被访问（即停留在_data链表中最久）的数据页id在链表头部，所以Victim一个数据页时就将_data头部的数据驱逐出链表即可。</li><li>注意在各种操作之前加锁；</li></ol><h3 id="3-2-TASK-2-BUFFER-POOL-MANAGER-INSTANCE"><a href="#3-2-TASK-2-BUFFER-POOL-MANAGER-INSTANCE" class="headerlink" title="3.2 TASK #2 - BUFFER POOL MANAGER INSTANCE"></a>3.2 <strong><strong>TASK #2 - BUFFER POOL MANAGER INSTANCE</strong></strong></h3><p>BufferPoolManagerInstance负责从DiskManager中提取页，并将其放入内存中。BPMI还可以将脏页写回磁盘、驱逐一个页以为新页挪出空间。该task主要实现buffer_pool_manager_instance.h中的接口，该类的主要数据结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page *pages_; <span class="comment">//一个page数组用于保存缓冲池中的page</span></span><br><span class="line">std::unordered_map&lt;<span class="type">page_id_t</span>, <span class="type">frame_id_t</span>&gt; page_table_; <span class="comment">//用于管理缓冲池中的page，实现page_id到frame_id的映射</span></span><br><span class="line">Replacer *replacer_; <span class="comment">//用于找到unpined数据页</span></span><br><span class="line">std::list&lt;<span class="type">frame_id_t</span>&gt; free_list_; <span class="comment">//没有使用的page</span></span><br><span class="line">std::mutex latch_;</span><br></pre></td></tr></table></figure><p>其中frame_id就是page_id在缓冲池中的一个表现形式，数据页在DiskManager中使用page_id来管理，当被放入缓冲池中，就用frame_id来管理。bufferPool中已经对其维护的page数组进行了初始化，其后的操作都只是修改page的元数据和数据而不是消除或者新建一个page对象。我认为对frame_id和page_id的理解是完成该task的关键所在。</p><ol><li>在Page类中主要维护了pin_count用于追踪正在访问该页线程的个数、is_dirty_记录自页面放入内存池中有未被修改、page_id_时DiskManager中该页面的id，如果该页面不包含physical page则设置其为INVALID_PAGE_ID</li><li>DiskManager主要实现了将数据写入磁盘和从磁盘读取数据的一些接口。</li></ol><p><img src="/.com//Untitled.png" alt="test"> –&gt; { % asset_img Untitled.png % }</p><p>以下是BufferPoolManagerInstance中各接口的关键实现逻辑：</p><ol><li><code>FlushPgImp</code>：刷新缓冲区的指定页到磁盘中，首先检查page_table_中是否有该页，没有返回false；有则记得先将page中is_dirty_设置为false，随后调用disk_manager的函数将数据页写回到磁盘中；</li><li><code>FlushAllPgImp</code>：将每个页都写回到磁盘中；</li><li><code>NewImp</code>：在缓冲池中新建一个页<ol><li>首先检查缓冲池中的所有数据页是否都正在被使用，是则返回nullptr；</li><li>完成上述检查：首先检查free_list，free_list为空就使用replacer进行数据页的驱逐，如果二者皆失败则返回nullptr。</li><li>拿到数据页后记得检查该页是否为脏页，是则先将其写回磁盘。</li><li>接着就是将该数据页纳入page_table_的管理（这里page_id的设置有些绕，确保在page_table_中的page_id是最新的page_id）</li><li>最后记得pin该数据页；</li></ol></li><li><code>FetchPgImp</code>：获取指定数据页<ol><li>如果要fetch的数据页已经在缓冲池中，取出就好，记得将pin_count加一；</li><li>如果指定数据页不在缓冲池中，则先将该页从磁盘读入内存中，读入的过程也是先检查free_list是否有空余位置，没有再用replacer驱逐页。</li><li>拿到数据页后更新page_table_和pages中的信息以及pin该数据页</li></ol></li><li><code>UnpinPgImp</code>：用户向缓冲池通知页面使用完毕的接口<ol><li>实现上注意检查page的pin_count，pin_count为0时从replacer中unpin该page</li><li>注意在replacer和BMPI中pin&#x2F;unpin操作含义的不同：在replacer中pin一个page表示该page应该从replacer中被驱逐，而在BMPI中pin一个page表示该页正在被使用，其不能被驱逐出缓冲池。</li></ol></li></ol><h3 id="3-3-TASK-3-PARALLEL-BUFFER-POOL-MANAGER"><a href="#3-3-TASK-3-PARALLEL-BUFFER-POOL-MANAGER" class="headerlink" title="3.3 TASK #3 - PARALLEL BUFFER POOL MANAGER"></a>3.3 <strong><strong>TASK #3 - PARALLEL BUFFER POOL MANAGER</strong></strong></h3><p><code>ParallelBufferPoolManager</code>中维护了多个<code>BufferPoolManagerInstance</code>，对于每个操作，PBPM会挑选一个BPMI来完成相应任务。</p><p>在实现中使用给定的<code>page_id</code>来决定选取特定的BPMI来完成任务。比如说一共有<code>num_instances</code>个BPMI，那我们就需要将给定的page_id映射到<code>[0, num_instances)</code>这个范围中来，在该project中使用了mod算子来完成这个映射任务：<code>page_id mod num_instances</code></p><p>ParallelBufferPoolManager类中维护的关键数据结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParallelBufferPoolManager</span> : <span class="keyword">public</span> BufferPoolManager &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">ParallelBufferPoolManager</span>(<span class="type">size_t</span> num_instances, <span class="type">size_t</span> pool_size, DiskManager *disk_manager,</span><br><span class="line">                            LogManager *log_manager = <span class="literal">nullptr</span>);</span><br><span class="line">  ~<span class="built_in">ParallelBufferPoolManager</span>() <span class="keyword">override</span>;</span><br><span class="line">  <span class="function"><span class="type">size_t</span> <span class="title">GetPoolSize</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  <span class="function">BufferPoolManager *<span class="title">GetBufferPoolManager</span><span class="params">(<span class="type">page_id_t</span> page_id)</span></span>;</span><br><span class="line">  <span class="function">Page *<span class="title">FetchPgImp</span><span class="params">(<span class="type">page_id_t</span> page_id)</span> <span class="keyword">override</span></span>;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">UnpinPgImp</span><span class="params">(<span class="type">page_id_t</span> page_id, <span class="type">bool</span> is_dirty)</span> <span class="keyword">override</span></span>;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">FlushPgImp</span><span class="params">(<span class="type">page_id_t</span> page_id)</span> <span class="keyword">override</span></span>;</span><br><span class="line">  <span class="function">Page *<span class="title">NewPgImp</span><span class="params">(<span class="type">page_id_t</span> *page_id)</span> <span class="keyword">override</span></span>;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">DeletePgImp</span><span class="params">(<span class="type">page_id_t</span> page_id)</span> <span class="keyword">override</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">FlushAllPgsImp</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  std::vector&lt;BufferPoolManager *&gt; instances_;</span><br><span class="line">  <span class="type">size_t</span> start_idx_&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="type">size_t</span> num_instances_;</span><br><span class="line">  <span class="type">size_t</span> pool_size_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意用于维护多个缓冲池的数据结构instances_中存放的是缓冲池实现类的基指针，接下来调用的函数应该为缓冲池实现类的基类对应的虚函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ParallelBufferPoolManager::<span class="built_in">ParallelBufferPoolManager</span>(<span class="type">size_t</span> num_instances, <span class="type">size_t</span> pool_size, DiskManager *disk_manager, LogManager *log_manager) : <span class="built_in">num_instances_</span>(num_instances), <span class="built_in">pool_size_</span>(pool_size)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; num_instances_; i++)&#123;</span><br><span class="line">    BufferPoolManagerInstance *temp = <span class="keyword">new</span> <span class="built_in">BufferPoolManagerInstance</span>(pool_size, num_instances, i, disk_manager, log_manager);</span><br><span class="line">    instances_.<span class="built_in">push_back</span>(temp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是ParallelBufferPoolManager中各接口的关键实现逻辑：</p><ol><li><code>GetBufferPoolManager</code>：<ol><li>从instances_中取出一个BPMI，下标就是用mod算子将给定page_id映射到<code>[0, num_instances_)</code>中的某个数字</li></ol></li><li><code>FetchPgImp</code>：<ol><li>获取到给定的BMPI后，调用instance中的FetchPage方法</li></ol></li><li><code>UnpinPgImp</code>：<ol><li>获取到给定的BMPI后，调用instance中的UnpinPage方法</li></ol></li><li><code>FlushPgImp</code>：<ol><li>获取到给定的BMPI后，调用instance中的FlushPage方法</li></ol></li><li><code>NewPgImp</code>：<ol><li>从start_idx开始，不停轮询instances中的各BMPI，看能否申请到一个新页</li><li>如果成功申请到新页，更新start_idx的值为申请到页面的下一个页面对应的BMPI的index，并返回指向该页的指针</li><li>未能成功申请到page时返回nullptr，start_idx加一</li></ol></li><li><code>DeletePgImp</code>：<ol><li>获取到给定的BMPI后，调用instance中的DeletePgImp方法</li></ol></li><li><code>FlushAllPagesImpl</code>：<ol><li>对于instances_中维护的每一个BMPI，都调用FlushAllPages方法</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> course projects </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis Cheatsheet</title>
      <link href="/2023/04/08/Redis-Cheatsheet/"/>
      <url>/2023/04/08/Redis-Cheatsheet/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis持久化</title>
      <link href="/2023/04/07/Redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2023/04/07/Redis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis三种数据持久化方式"><a href="#Redis三种数据持久化方式" class="headerlink" title="Redis三种数据持久化方式"></a>Redis三种数据持久化方式</h1><h1 id="一、AOF日志"><a href="#一、AOF日志" class="headerlink" title="一、AOF日志"></a>一、AOF日志</h1><h1 id="二、RDB快照"><a href="#二、RDB快照" class="headerlink" title="二、RDB快照"></a>二、RDB快照</h1><h1 id="三、混合持久化方式"><a href="#三、混合持久化方式" class="headerlink" title="三、混合持久化方式"></a>三、混合持久化方式</h1>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
